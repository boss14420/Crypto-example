#!/usr/bin/env python3

###########################################3

lxor = lambda X, Y: [x^y for x,y in zip(X, Y)]
bxor = lambda X, Y: bytes(lxor(X, Y))

BS = 16
pad = lambda s: s + bytes([(BS - len(s) % BS)] * (BS - len(s) % BS))
unpad = lambda s : s[0:-(s[-1])]

##############################################################################
############ SubBytes
##############################################################################

sbox = bytes([
   0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
   0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
   0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
   0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
   0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
   0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
   0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
   0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
   0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
   0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
   0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
   0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
   0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
   0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
   0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
   0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
            ])

inv_sbox = bytes([
   0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
   0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
   0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
   0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
   0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
   0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
   0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
   0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
   0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
   0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
   0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
   0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
   0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
   0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
   0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
   0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
                ])

S = lambda B: bytes([sbox[b] for b in B])
inv_S = lambda B: bytes([inv_sbox[b] for b in B])


##############################################################################
############ ShiftRows
##############################################################################

shift_rows= lambda B: bytes([B[0], B[5], B[10], B[15],
                             B[4], B[9], B[14], B[3],
                             B[8], B[13], B[2], B[7],
                             B[12], B[1], B[6], B[11]])

inv_shift_row = lambda B: bytes([B[0], B[13], B[10], B[7],
                                 B[4], B[1], B[14], B[11],
                                 B[8], B[5], B[2], B[15],
                                 B[12], B[9], B[6], B[3]])


##############################################################################
############ MixCols
##############################################################################

# source: http://www.samiam.org/galois.html

ltable = bytes([    0x00, 0xff, 0xc8, 0x08, 0x91, 0x10, 0xd0, 0x36,
                    0x5a, 0x3e, 0xd8, 0x43, 0x99, 0x77, 0xfe, 0x18,
                    0x23, 0x20, 0x07, 0x70, 0xa1, 0x6c, 0x0c, 0x7f,
                    0x62, 0x8b, 0x40, 0x46, 0xc7, 0x4b, 0xe0, 0x0e,
                    0xeb, 0x16, 0xe8, 0xad, 0xcf, 0xcd, 0x39, 0x53,
                    0x6a, 0x27, 0x35, 0x93, 0xd4, 0x4e, 0x48, 0xc3,
                    0x2b, 0x79, 0x54, 0x28, 0x09, 0x78, 0x0f, 0x21,
                    0x90, 0x87, 0x14, 0x2a, 0xa9, 0x9c, 0xd6, 0x74,
                    0xb4, 0x7c, 0xde, 0xed, 0xb1, 0x86, 0x76, 0xa4,
                    0x98, 0xe2, 0x96, 0x8f, 0x02, 0x32, 0x1c, 0xc1,
                    0x33, 0xee, 0xef, 0x81, 0xfd, 0x30, 0x5c, 0x13,
                    0x9d, 0x29, 0x17, 0xc4, 0x11, 0x44, 0x8c, 0x80,
                    0xf3, 0x73, 0x42, 0x1e, 0x1d, 0xb5, 0xf0, 0x12,
                    0xd1, 0x5b, 0x41, 0xa2, 0xd7, 0x2c, 0xe9, 0xd5,
                    0x59, 0xcb, 0x50, 0xa8, 0xdc, 0xfc, 0xf2, 0x56,
                    0x72, 0xa6, 0x65, 0x2f, 0x9f, 0x9b, 0x3d, 0xba,
                    0x7d, 0xc2, 0x45, 0x82, 0xa7, 0x57, 0xb6, 0xa3,
                    0x7a, 0x75, 0x4f, 0xae, 0x3f, 0x37, 0x6d, 0x47,
                    0x61, 0xbe, 0xab, 0xd3, 0x5f, 0xb0, 0x58, 0xaf,
                    0xca, 0x5e, 0xfa, 0x85, 0xe4, 0x4d, 0x8a, 0x05,
                    0xfb, 0x60, 0xb7, 0x7b, 0xb8, 0x26, 0x4a, 0x67,
                    0xc6, 0x1a, 0xf8, 0x69, 0x25, 0xb3, 0xdb, 0xbd,
                    0x66, 0xdd, 0xf1, 0xd2, 0xdf, 0x03, 0x8d, 0x34,
                    0xd9, 0x92, 0x0d, 0x63, 0x55, 0xaa, 0x49, 0xec,
                    0xbc, 0x95, 0x3c, 0x84, 0x0b, 0xf5, 0xe6, 0xe7,
                    0xe5, 0xac, 0x7e, 0x6e, 0xb9, 0xf9, 0xda, 0x8e,
                    0x9a, 0xc9, 0x24, 0xe1, 0x0a, 0x15, 0x6b, 0x3a,
                    0xa0, 0x51, 0xf4, 0xea, 0xb2, 0x97, 0x9e, 0x5d,
                    0x22, 0x88, 0x94, 0xce, 0x19, 0x01, 0x71, 0x4c,
                    0xa5, 0xe3, 0xc5, 0x31, 0xbb, 0xcc, 0x1f, 0x2d,
                    0x3b, 0x52, 0x6f, 0xf6, 0x2e, 0x89, 0xf7, 0xc0,
                    0x68, 0x1b, 0x64, 0x04, 0x06, 0xbf, 0x83, 0x38
                ])

atable = bytes([    0x01, 0xe5, 0x4c, 0xb5, 0xfb, 0x9f, 0xfc, 0x12,
                    0x03, 0x34, 0xd4, 0xc4, 0x16, 0xba, 0x1f, 0x36,
                    0x05, 0x5c, 0x67, 0x57, 0x3a, 0xd5, 0x21, 0x5a,
                    0x0f, 0xe4, 0xa9, 0xf9, 0x4e, 0x64, 0x63, 0xee,
                    0x11, 0x37, 0xe0, 0x10, 0xd2, 0xac, 0xa5, 0x29,
                    0x33, 0x59, 0x3b, 0x30, 0x6d, 0xef, 0xf4, 0x7b,
                    0x55, 0xeb, 0x4d, 0x50, 0xb7, 0x2a, 0x07, 0x8d,
                    0xff, 0x26, 0xd7, 0xf0, 0xc2, 0x7e, 0x09, 0x8c,
                    0x1a, 0x6a, 0x62, 0x0b, 0x5d, 0x82, 0x1b, 0x8f,
                    0x2e, 0xbe, 0xa6, 0x1d, 0xe7, 0x9d, 0x2d, 0x8a,
                    0x72, 0xd9, 0xf1, 0x27, 0x32, 0xbc, 0x77, 0x85,
                    0x96, 0x70, 0x08, 0x69, 0x56, 0xdf, 0x99, 0x94,
                    0xa1, 0x90, 0x18, 0xbb, 0xfa, 0x7a, 0xb0, 0xa7,
                    0xf8, 0xab, 0x28, 0xd6, 0x15, 0x8e, 0xcb, 0xf2,
                    0x13, 0xe6, 0x78, 0x61, 0x3f, 0x89, 0x46, 0x0d,
                    0x35, 0x31, 0x88, 0xa3, 0x41, 0x80, 0xca, 0x17,
                    0x5f, 0x53, 0x83, 0xfe, 0xc3, 0x9b, 0x45, 0x39,
                    0xe1, 0xf5, 0x9e, 0x19, 0x5e, 0xb6, 0xcf, 0x4b,
                    0x38, 0x04, 0xb9, 0x2b, 0xe2, 0xc1, 0x4a, 0xdd,
                    0x48, 0x0c, 0xd0, 0x7d, 0x3d, 0x58, 0xde, 0x7c,
                    0xd8, 0x14, 0x6b, 0x87, 0x47, 0xe8, 0x79, 0x84,
                    0x73, 0x3c, 0xbd, 0x92, 0xc9, 0x23, 0x8b, 0x97,
                    0x95, 0x44, 0xdc, 0xad, 0x40, 0x65, 0x86, 0xa2,
                    0xa4, 0xcc, 0x7f, 0xec, 0xc0, 0xaf, 0x91, 0xfd,
                    0xf7, 0x4f, 0x81, 0x2f, 0x5b, 0xea, 0xa8, 0x1c,
                    0x02, 0xd1, 0x98, 0x71, 0xed, 0x25, 0xe3, 0x24,
                    0x06, 0x68, 0xb3, 0x93, 0x2c, 0x6f, 0x3e, 0x6c,
                    0x0a, 0xb8, 0xce, 0xae, 0x74, 0xb1, 0x42, 0xb4,
                    0x1e, 0xd3, 0x49, 0xe9, 0x9c, 0xc8, 0xc6, 0xc7,
                    0x22, 0x6e, 0xdb, 0x20, 0xbf, 0x43, 0x51, 0x52,
                    0x66, 0xb2, 0x76, 0x60, 0xda, 0xc5, 0xf3, 0xf6,
                    0xaa, 0xcd, 0x9a, 0xa0, 0x75, 0x54, 0x0e, 0x01
                ])

gmul = lambda a, b: atable[(ltable[a] + ltable[b]) % 255] \
                    if a > 0 and b > 0 else 0

mix_cols = lambda B: bytes([
                gmul(B[0], 2) ^ gmul(B[1], 3) ^ B[2] ^ B[3],
                B[0] ^ gmul(B[1], 2) ^ gmul(B[2], 3) ^ B[3],
                B[0] ^ B[1] ^ gmul(B[2], 2) ^ gmul(B[3], 3),
                gmul(B[0], 3) ^ B[1] ^ B[2] ^ gmul(B[3], 2),

                gmul(B[4], 2) ^ gmul(B[5], 3) ^ B[6] ^ B[7],
                B[4] ^ gmul(B[5], 2) ^ gmul(B[6], 3) ^ B[7],
                B[4] ^ B[5] ^ gmul(B[6], 2) ^ gmul(B[7], 3),
                gmul(B[4], 3) ^ B[5] ^ B[6] ^ gmul(B[7], 2),

                gmul(B[8], 2) ^ gmul(B[9], 3) ^ B[10] ^ B[11],
                B[8] ^ gmul(B[9], 2) ^ gmul(B[10], 3) ^ B[11],
                B[8] ^ B[9] ^ gmul(B[10], 2) ^ gmul(B[11], 3),
                gmul(B[8], 3) ^ B[9] ^ B[10] ^ gmul(B[11], 2),

                gmul(B[12], 2) ^ gmul(B[13], 3) ^ B[14] ^ B[15],
                B[12] ^ gmul(B[13], 2) ^ gmul(B[14], 3) ^ B[15],
                B[12] ^ B[13] ^ gmul(B[14], 2) ^ gmul(B[15], 3),
                gmul(B[12], 3) ^ B[13] ^ B[14] ^ gmul(B[15], 2)
                            ])

inv_mix_cols = lambda B: bytes([
            gmul(B[0], 14) ^ gmul(B[1], 11) ^ gmul(B[2], 13) ^ gmul(B[3],  9),
            gmul(B[0],  9) ^ gmul(B[1], 14) ^ gmul(B[2], 11) ^ gmul(B[3], 13),
            gmul(B[0], 13) ^ gmul(B[1],  9) ^ gmul(B[2], 14) ^ gmul(B[3], 11),
            gmul(B[0], 11) ^ gmul(B[1], 13) ^ gmul(B[2],  9) ^ gmul(B[3], 14),

            gmul(B[4], 14) ^ gmul(B[5], 11) ^ gmul(B[6], 13) ^ gmul(B[7],  9),
            gmul(B[4],  9) ^ gmul(B[5], 14) ^ gmul(B[6], 11) ^ gmul(B[7], 13),
            gmul(B[4], 13) ^ gmul(B[5],  9) ^ gmul(B[6], 14) ^ gmul(B[7], 11),
            gmul(B[4], 11) ^ gmul(B[5], 13) ^ gmul(B[6],  9) ^ gmul(B[7], 14),

            gmul(B[8], 14) ^ gmul(B[9], 11) ^ gmul(B[10], 13) ^ gmul(B[11],  9),
            gmul(B[8],  9) ^ gmul(B[9], 14) ^ gmul(B[10], 11) ^ gmul(B[11], 13),
            gmul(B[8], 13) ^ gmul(B[9],  9) ^ gmul(B[10], 14) ^ gmul(B[11], 11),
            gmul(B[8], 11) ^ gmul(B[9], 13) ^ gmul(B[10],  9) ^ gmul(B[11], 14),

            gmul(B[12], 14) ^ gmul(B[13], 11) ^ gmul(B[14], 13) ^ gmul(B[15],  9),
            gmul(B[12],  9) ^ gmul(B[13], 14) ^ gmul(B[14], 11) ^ gmul(B[15], 13),
            gmul(B[12], 13) ^ gmul(B[13],  9) ^ gmul(B[14], 14) ^ gmul(B[15], 11),
            gmul(B[12], 11) ^ gmul(B[13], 13) ^ gmul(B[14],  9) ^ gmul(B[15], 14)
                                ])


##############################################################################
############ Key Expand
##############################################################################

Rcon = bytes([0x8d, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20,
              0x40, 0x80, 0x1B, 0x36, 0x6C])

def key_expand(K):
    KE = [bytearray(K) for i in range(11)]
    for i in range(1, 11):
        KE[i][0:4] = [KE[i-1][0] ^ sbox[KE[i-1][13]] ^ Rcon[i],
                      KE[i-1][1] ^ sbox[KE[i-1][14]],
                      KE[i-1][2] ^ sbox[KE[i-1][15]],
                      KE[i-1][3] ^ sbox[KE[i-1][12]]]

        KE[i][4:8]   = bxor(KE[i-1][4:8], KE[i][:4])
        KE[i][8:12]  = bxor(KE[i-1][8:12], KE[i][4:8])
        KE[i][12:16] = bxor(KE[i-1][12:16], KE[i][8:12])
    return KE


##############################################################################
############ ENCRYPT & DECRYPT
##############################################################################

def aes_encrypt_block(M, KE):
    s = bxor(M, KE[0])
    for r in range(1, 10):
        #s = S(s)
        #s = shift_rows(s)
        #s = mix_cols(s)
        #s = bxor(s, KE[r])
        s = bxor(KE[r], mix_cols(shift_rows(S(s))))

    #s = S(s)
    #s = shift_rows(s)
    #s = bxor(s, KE[10])
    s = bxor(KE[10], shift_rows(S(s)))
    return s


def aes_decrypt_block(M, KE):
    #s = bxor(M, KE[10])
    #s = inv_shift_row(s)
    #s = inv_S(s)
    s = inv_S(inv_shift_row(bxor(M, KE[10])))

    for r in range(9, 0, -1):
        #s = bxor(s, KE[r])
        #s = inv_mix_cols(s)
        #s = inv_shift_row(s)
        #s = inv_S(s)
        s = inv_S(inv_shift_row(inv_mix_cols(bxor(s, KE[r]))))

    s = bxor(s, KE[0])
    return s


import block_cipher


def aes_encrypt_cbc(plaintext, key, iv):
    if len(key) != 16:
        raise ValueError("key must be 16 bytes long")
    if len(iv) != 16:
        raise ValueError("IV must be 16 bytes long")

    ke = key_expand(key)
    return block_cipher.cbc_encrypt(plaintext, ke, aes_encrypt_block, 16, iv)


def aes_decrypt_cbc(plaintext, key, iv):
    if len(key) != 16:
        raise ValueError("key must be 16 bytes long")
    if len(iv) != 16:
        raise ValueError("IV must be 16 bytes long")

    ke = key_expand(key)
    return block_cipher.cbc_decrypt(plaintext, ke, aes_decrypt_block, 16, iv)

def aes_encrypt_ctr(plaintext, key, counter):
    if len(key) != 16:
        raise ValueError("key must be 16 bytes long")

    ke = key_expand(key)
    return block_cipher.ctr_encrypt(plaintext, ke, aes_encrypt_block, 16, counter)

def aes_decrypt_ctr(ciphertext, key, counter):
    if len(key) != 16:
        raise ValueError("key must be 16 bytes long")

    ke = key_expand(key)
    return block_cipher.ctr_decrypt(ciphertext, ke, aes_encrypt_block, 16, counter)

##################################################################
############### MAIN #############################################

import binascii
import sys

from Crypto.Cipher import AES
from Crypto.Util import Counter
import time


if __name__ == "__main__":
    #key = b'\x0f\x15q\xc9G\xd9\xe8Y\x0c\xb7\xad\xd6\xaf\x7fg\x98'
    #message = b'abcdefghabcdefgh'
    #key = sys.argv[0]
    #message = sys.argv[1]

    key = bytes(16)
    iv = bytes(16)
    nonce = bytes(8)
    if sys.argv[1] == "--encrypt" or sys.argv[1] == "-c":
        with open(sys.argv[2], 'rb') as f:
            plaintext = pad(f.read())
            #ctr = Counter.new(64, prefix=nonce, initial_value=0)
            begin = time.time()
            #ciphertext1 = aes_encrypt_ctr(plaintext, key, ctr)
            ciphertext1 = aes_encrypt_cbc(plaintext, key, iv)
            my_time = time.time() - begin

            #ctr = Counter.new(64, prefix=nonce, initial_value=0)
            begin = time.time()
            #ciphertext2 = AES.new(key, AES.MODE_CTR, iv, counter=ctr).encrypt(plaintext)
            ciphertext2 = AES.new(key, AES.MODE_CBC, iv).encrypt(plaintext)
            pycrypto_time = time.time() - begin

        with open(sys.argv[3], 'wb') as f:
            f.write(ciphertext1)

        with open(sys.argv[4], 'wb') as f:
            f.write(ciphertext2)

    elif sys.argv[1] == "--decrypt" or sys.argv[1] == "-d":
        with open(sys.argv[2], 'rb') as f:
            ciphertext = f.read()
            ctr = Counter.new(64, prefix=nonce, initial_value=0)
            begin = time.time()
            plaintext1 = aes_decrypt_ctr(ciphertext, key, ctr)
            #plaintext1 = unpad(plaintext1)
            plaintext1 = aes_decrypt_cbc(ciphertext, key, iv)
            my_time = time.time() - begin

            ctr = Counter.new(64, prefix=nonce, initial_value=0)
            begin = time.time()
            #plaintext2 = AES.new(key, AES.MODE_CTR, iv, counter=ctr).decrypt(ciphertext)
            plaintext2 = AES.new(key, AES.MODE_CBC, iv).decrypt(ciphertext)
            plaintext2 = unpad(plaintext2)
            pycrypto_time = time.time() - begin

        with open(sys.argv[3], 'wb') as f:
            f.write(plaintext1)

        with open(sys.argv[4], 'wb') as f:
            f.write(plaintext2)

    print("my aes time: " + str(my_time))
    print("pycrypto time: " + str(pycrypto_time))
